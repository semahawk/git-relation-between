#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright © 2016 Szymon Urbaś <szymon.urbas@aol.com>
#
# Distributed under terms of the BSD (2-clause) license.

import networkx as nx
from networkx.drawing.nx_pydot import write_dot
from pygit2 import *
import argparse
import os
import sys

# A helper function to return the first 7 characters of the given <commit>'s hash
def short_id(commit):
  return str(commit.id)[:7]

# Check whether you can get to <potential_child> by traversing the
# history starting from <potential_parent>
def is_ancestor(repo, potential_parent, potential_child):
  reachable = False

  for commit in repo.walk(potential_parent.id, GIT_SORT_TOPOLOGICAL):
    if commit.id == potential_child.id and commit.id != potential_parent.id:
      reachable = True
      break

  return reachable

def is_direct_parent(repo, potential_direct_parent, child):
  if child.parents:
    actual_direct_parent = child.parents[0];
    if potential_direct_parent.id == actual_direct_parent.id:
      return True
    else:
      return False
  else:
    return False

# Check whether two commits have a common parent (but are divergent)
def have_common_parent(repo, commit1, commit2):
  merge_base = repo.merge_base(commit1.id, commit2.id)

  return merge_base != None and merge_base != commit1.id and merge_base != commit2.id

def common_parent(repo, commit1, commit2):
  return repo.get(repo.merge_base(commit1.id, commit2.id))

def find_all_paths(graph, start, end, path=[]):
  path = path + [start]

  if start == end:
    return [path]

  if not start in graph:
    return []

  paths = []

  for node in graph[start]:
    if node not in path:
      newpaths = find_all_paths(graph, node, end, path)
      for newpath in newpaths:
        paths.append(newpath)

  return paths

if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument('-p', dest='path', action='store', default=".")
  parser.add_argument('commits', metavar='N', type=str, nargs='+', help='commit hashes')
  args = parser.parse_args()
  graph = nx.DiGraph()

  path = os.path.realpath(args.path)

  try:
    repo = Repository(path + "/.git")
  except KeyError:
    print("Couldn't find a git repository in %s" % (path))
    sys.exit(1)

  for commit in args.commits:
    error = False
    try:
      obj = repo.revparse_single(commit)
    except:
      error = True
      sys.exit(1)

  for commit in args.commits:
    arg = commit
    commit = repo.revparse_single(commit)

    already_present = False
    for node in graph.nodes():
      if is_ancestor(repo, node, commit):
        graph.add_edge(commit, node)
      elif is_ancestor(repo, commit, node):
        graph.add_edge(node, commit)
      elif have_common_parent(repo, commit, node):
        common_parent = common_parent(repo, commit, node)
        graph.add_edge(common_parent, commit)
        graph.add_edge(common_parent, node)

      if node.id == commit.id:
        already_present = True

    if already_present == False:
      graph.add_node(commit, name_given_from_cli = arg)

  print("digraph G {")

  for n in graph.nodes():
    if 'name_given_from_cli' in graph.node[n]:
      print("  node_%s [label=\"%s (%s)\\n%s\",color=\"#336699\"];" % (n.id, short_id(n), graph.node[n]['name_given_from_cli'], n.message.rstrip().split("\n")[0]))
    else:
      print("  node_%s [label=\"%s\\n%s\",style=dashed,color=\"#444444\",fontcolor=\"#444444\"];" % (n.id, short_id(n), n.message.rstrip().split("\n")[0]))

  for (f, t) in graph.edges():
    # check if the commit 't' (to) going to 'from' (from) is it's direct parent
    # if so then draw a direct connection between them
    # we're going the opposite way (to -> from) so that the children nodes are
    # on top (visually) - like eg. in git's usual log
    if is_direct_parent(repo, f, t):
      print("  node_%s -> node_%s;" % (t.id, f.id))
    # if they are not directly related (ie. there's some commits in between
    # them (but one is still an ancestor of the other)) then create an
    # 'intermediate' node which symbolizes the commits in between them
    else:
      print("  node_intermediate_%s_%s [label=\"...\",style=dotted];" % (t.id, f.id))
      print("  node_%s -> node_intermediate_%s_%s;" % (t.id, t.id, f.id))
      print("  node_intermediate_%s_%s -> node_%s;" % (t.id, f.id, f.id))

  print("}")

# vi: set ts=2:sw=2:expandtab

